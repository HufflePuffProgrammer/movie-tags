-- CineFind Complete Database Schema
-- Run this script in your Supabase SQL Editor to set up all required tables

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =====================================================
-- PROFILES TABLE
-- =====================================================

-- User profiles (extends auth.users)
DROP TABLE IF EXISTS public.profiles CASCADE;
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  user_name TEXT UNIQUE NOT NULL,
  full_name TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- MOVIES TABLE  
-- =====================================================

-- Core movie catalog
DROP TABLE IF EXISTS public.movies CASCADE;
CREATE TABLE IF NOT EXISTS public.movies (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  release_date DATE,
  poster_url TEXT,
  genre TEXT,
  director TEXT,
  runtime_minutes INTEGER,
  imdb_id TEXT,
  tmdb_id INTEGER UNIQUE, -- Ensure no duplicate TMDB movies
  overview TEXT, -- TMDB overview field (separate from description)
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- CATEGORIES TABLE
-- =====================================================

-- Admin-curated movie categories
DROP TABLE IF EXISTS public.categories CASCADE;
CREATE TABLE IF NOT EXISTS public.categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  color TEXT NOT NULL DEFAULT '#3B82F6',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- TAGS TABLE
-- =====================================================

-- Admin-curated movie tags
DROP TABLE IF EXISTS public.tags CASCADE;
CREATE TABLE IF NOT EXISTS public.tags (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  color TEXT NOT NULL DEFAULT '#3B82F6',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- USER MOVIE CATEGORIES TABLE
-- =====================================================

-- User's personal movie categorizations
DROP TABLE IF EXISTS public.user_movie_categories CASCADE;
CREATE TABLE IF NOT EXISTS public.user_movie_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id BIGINT NOT NULL REFERENCES public.movies(id) ON DELETE CASCADE,
  category_id BIGINT NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(user_id, movie_id, category_id)
);

-- =====================================================
-- USER MOVIE TAGS TABLE
-- =====================================================

-- User's personal movie tags
DROP TABLE IF EXISTS public.user_movie_tags CASCADE;
CREATE TABLE IF NOT EXISTS public.user_movie_tags (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id BIGINT NOT NULL REFERENCES public.movies(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES public.tags(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(user_id, movie_id, tag_id)
);

-- =====================================================
-- USER NOTES TABLE
-- =====================================================

-- User's personal movie notes
DROP TABLE IF EXISTS public.user_notes CASCADE;
CREATE TABLE IF NOT EXISTS public.user_notes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id BIGINT NOT NULL REFERENCES public.movies(id) ON DELETE CASCADE,
  content TEXT NOT NULL CHECK (length(content) <= 400),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(user_id, movie_id)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Profiles indexes
CREATE INDEX IF NOT EXISTS idx_profiles_user_name ON public.profiles(user_name);

-- Movies indexes  
CREATE INDEX IF NOT EXISTS idx_movies_title ON public.movies(title);
CREATE INDEX IF NOT EXISTS idx_movies_genre ON public.movies(genre);
CREATE INDEX IF NOT EXISTS idx_movies_release_date ON public.movies(release_date);
CREATE INDEX IF NOT EXISTS idx_movies_tmdb_id ON public.movies(tmdb_id);
-- Full-text search index for smart search
CREATE INDEX IF NOT EXISTS idx_movies_search ON public.movies USING gin(to_tsvector('english', title || ' ' || COALESCE(overview, '') || ' ' || COALESCE(description, '')));

-- Categories indexes
CREATE INDEX IF NOT EXISTS idx_categories_name ON public.categories(name);

-- Tags indexes
CREATE INDEX IF NOT EXISTS idx_tags_name ON public.tags(name);

-- User movie categories indexes
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_user_id ON public.user_movie_categories(user_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_movie_id ON public.user_movie_categories(movie_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_category_id ON public.user_movie_categories(category_id);

-- User movie tags indexes
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_user_id ON public.user_movie_tags(user_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_movie_id ON public.user_movie_tags(movie_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_tag_id ON public.user_movie_tags(tag_id);

-- User notes indexes
CREATE INDEX IF NOT EXISTS idx_user_notes_user_id ON public.user_notes(user_id);
CREATE INDEX IF NOT EXISTS idx_user_notes_movie_id ON public.user_notes(movie_id);

-- =====================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.movies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_movie_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_movie_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_notes ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "profiles_select_all" ON public.profiles
  FOR SELECT USING (true);

CREATE POLICY "profiles_update_own" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "profiles_insert_own" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Movies policies (publicly readable)
CREATE POLICY "movies_select_all" ON public.movies
  FOR SELECT USING (true);

-- Categories policies (publicly readable, admin can modify)
CREATE POLICY "categories_select_all" ON public.categories
  FOR SELECT USING (true);

CREATE POLICY "categories_admin_all" ON public.categories
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM auth.users 
      WHERE auth.uid() = id 
      AND (email LIKE '%admin%' OR email = 'testuser02@email.com')
    )
  );

-- Tags policies (publicly readable, admin can modify)
CREATE POLICY "tags_select_all" ON public.tags
  FOR SELECT USING (true);

CREATE POLICY "tags_admin_all" ON public.tags
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM auth.users 
      WHERE auth.uid() = id 
      AND (email LIKE '%admin%' OR email = 'testuser02@email.com')
    )
  );

-- User movie categories policies (users can only access their own)
CREATE POLICY "user_movie_categories_own" ON public.user_movie_categories
  FOR ALL USING (auth.uid() = user_id);

-- User movie tags policies (users can only access their own)
CREATE POLICY "user_movie_tags_own" ON public.user_movie_tags
  FOR ALL USING (auth.uid() = user_id);

-- User notes policies (users can only access their own)
CREATE POLICY "user_notes_own" ON public.user_notes
  FOR ALL USING (auth.uid() = user_id);

-- =====================================================
-- TRIGGERS FOR AUTOMATIC TIMESTAMPS
-- =====================================================

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers for updated_at
CREATE TRIGGER update_profiles_updated_at
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_movies_updated_at
    BEFORE UPDATE ON public.movies
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_categories_updated_at
    BEFORE UPDATE ON public.categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tags_updated_at
    BEFORE UPDATE ON public.tags
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_notes_updated_at
    BEFORE UPDATE ON public.user_notes
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- AUTO PROFILE CREATION ON SIGNUP
-- =====================================================

-- Function to create user profile on signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, user_name, full_name)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'user_name', 'user_' || substring(NEW.id::text, 1, 8)),
    COALESCE(NEW.raw_user_meta_data->>'full_name', 'New User')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create profile when user signs up
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
