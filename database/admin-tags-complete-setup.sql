-- Complete Admin Tags Setup
-- This script creates the tags table and user_movie_tags relationship table
-- Run this script in your Supabase SQL Editor

-- =====================================================
-- CREATE ADMIN TAGS TABLE
-- =====================================================

-- Admin-curated tags (if not already exists)
CREATE TABLE IF NOT EXISTS public.tags (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  color TEXT DEFAULT '#6B7280', -- For UI customization
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- CREATE USER-MOVIE-TAGS RELATIONSHIP TABLE
-- =====================================================

-- User-specific movie tagging (many-to-many relationship with admin tags)
DROP TABLE IF EXISTS public.user_movie_tags CASCADE;
CREATE TABLE IF NOT EXISTS public.user_movie_tags (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id BIGINT NOT NULL REFERENCES public.movies(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES public.tags(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  -- Prevent duplicate tag assignments per user per movie
  UNIQUE(user_id, movie_id, tag_id)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Tags table indexes
CREATE INDEX IF NOT EXISTS idx_tags_name ON public.tags(name);

-- User movie tags indexes
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_user_id ON public.user_movie_tags(user_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_movie_id ON public.user_movie_tags(movie_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_tag_id ON public.user_movie_tags(tag_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_tags_user_movie ON public.user_movie_tags(user_id, movie_id);

-- =====================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- =====================================================

-- Enable RLS on tables
ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_movie_tags ENABLE ROW LEVEL SECURITY;

-- Everyone can read tags (they are admin-curated)
CREATE POLICY "tags_public_read" ON public.tags
  FOR SELECT USING (true);

-- Users can only access their own movie tag assignments
CREATE POLICY "user_movie_tags_self_access" ON public.user_movie_tags
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- =====================================================
-- INSERT STORYTELLING ANALYSIS TAGS
-- =====================================================

-- Insert your storytelling elements as admin tags
INSERT INTO public.tags (name, description, color) VALUES
  ('Premise', 'The basic concept or central idea of the movie', '#3B82F6'),
  ('Character', 'Character development, arcs, and personalities', '#10B981'),
  ('Dialogue', 'Quality and style of conversations and writing', '#8B5CF6'),
  ('Comedy', 'Humor, comedic timing, and funny elements', '#F59E0B'),
  ('Conflict', 'Central conflicts, tension, and dramatic elements', '#EF4444'),
  ('Midpoint', 'The crucial turning point in the story', '#EC4899'),
  ('Introduction', 'How characters and world are established', '#06B6D4'),
  ('Stakes', 'What characters stand to gain or lose', '#84CC16'),
  ('Goals', 'Character motivations and objectives', '#F97316'),
  ('Inciting Incident', 'The event that sets the story in motion', '#6366F1'),
  ('Escalation', 'How tension and conflict build throughout', '#DC2626'),
  ('Emotion', 'Emotional impact and character feelings', '#DB2777'),
  ('Pacing', 'Rhythm, timing, and flow of the narrative', '#059669'),
  ('Theme', 'Underlying messages and deeper meanings', '#7C3AED')
ON CONFLICT (name) DO NOTHING;

-- =====================================================
-- HELPER FUNCTIONS
-- =====================================================

-- Function to get available tags for a user/movie (tags not yet assigned)
CREATE OR REPLACE FUNCTION get_available_tags_for_movie(user_uuid UUID, movie_bigint BIGINT)
RETURNS TABLE (
  id BIGINT,
  name TEXT,
  description TEXT,
  color TEXT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.id,
    t.name,
    t.description,
    t.color
  FROM public.tags t
  WHERE t.id NOT IN (
    SELECT umt.tag_id 
    FROM public.user_movie_tags umt 
    WHERE umt.user_id = user_uuid AND umt.movie_id = movie_bigint
  )
  ORDER BY t.name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get user's assigned tags for a movie
CREATE OR REPLACE FUNCTION get_user_assigned_tags(user_uuid UUID, movie_bigint BIGINT)
RETURNS TABLE (
  id BIGINT,
  tag_id BIGINT,
  tag_name TEXT,
  tag_description TEXT,
  tag_color TEXT,
  assigned_at TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    umt.id,
    t.id as tag_id,
    t.name as tag_name,
    t.description as tag_description,
    t.color as tag_color,
    umt.created_at as assigned_at
  FROM public.user_movie_tags umt
  JOIN public.tags t ON umt.tag_id = t.id
  WHERE umt.user_id = user_uuid AND umt.movie_id = movie_bigint
  ORDER BY umt.created_at DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Check tables were created
SELECT 
  'Tables Created:' as status,
  COUNT(*) as table_count
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('tags', 'user_movie_tags');

-- Check tags were inserted
SELECT 
  'Admin Tags Inserted:' as status,
  COUNT(*) as tag_count 
FROM public.tags;

-- View all admin tags
SELECT 
  id,
  name,
  description,
  color,
  created_at
FROM public.tags 
ORDER BY name;

-- Check RLS is enabled
SELECT 
  schemaname,
  tablename,
  rowsecurity
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('tags', 'user_movie_tags');

RAISE NOTICE 'Admin tags setup completed successfully!';
