-- Add Categories to CineFind Database Schema
-- Run this script in your Supabase SQL Editor to add category functionality

-- =====================================================
-- CATEGORIES TABLE
-- =====================================================

-- Categories that can be applied to movies (e.g., "Action", "Comedy", "Drama")
CREATE TABLE IF NOT EXISTS public.categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  description TEXT,
  color TEXT DEFAULT '#3B82F6', -- Default blue color
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- USER MOVIE CATEGORIES TABLE
-- =====================================================

-- Junction table for user-specific movie categorization
CREATE TABLE IF NOT EXISTS public.user_movie_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id BIGINT NOT NULL REFERENCES public.movies(id) ON DELETE CASCADE,
  category_id BIGINT NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  
  -- Ensure a user can't add the same category to the same movie twice
  UNIQUE(user_id, movie_id, category_id)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Categories indexes
CREATE INDEX IF NOT EXISTS idx_categories_name ON public.categories(name);

-- User movie categories indexes
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_user_id ON public.user_movie_categories(user_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_movie_id ON public.user_movie_categories(movie_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_category_id ON public.user_movie_categories(category_id);
CREATE INDEX IF NOT EXISTS idx_user_movie_categories_user_movie ON public.user_movie_categories(user_id, movie_id);

-- =====================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- =====================================================

-- Enable RLS on categories (publicly readable, admin-only editable for now)
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;

-- Everyone can read categories
CREATE POLICY "categories_select_all" ON public.categories
  FOR SELECT USING (true);

-- Only authenticated users can create categories (we can restrict this later)
CREATE POLICY "categories_insert_authenticated" ON public.categories
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Only authenticated users can update categories (we can restrict this later)  
CREATE POLICY "categories_update_authenticated" ON public.categories
  FOR UPDATE USING (auth.role() = 'authenticated');

-- Enable RLS on user_movie_categories
ALTER TABLE public.user_movie_categories ENABLE ROW LEVEL SECURITY;

-- Users can only see their own movie categories
CREATE POLICY "user_movie_categories_select_own" ON public.user_movie_categories
  FOR SELECT USING (auth.uid() = user_id);

-- Users can only insert their own movie categories
CREATE POLICY "user_movie_categories_insert_own" ON public.user_movie_categories
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can only update their own movie categories
CREATE POLICY "user_movie_categories_update_own" ON public.user_movie_categories
  FOR UPDATE USING (auth.uid() = user_id);

-- Users can only delete their own movie categories
CREATE POLICY "user_movie_categories_delete_own" ON public.user_movie_categories
  FOR DELETE USING (auth.uid() = user_id);

-- =====================================================
-- TRIGGERS FOR AUTOMATIC TIMESTAMPS
-- =====================================================

-- Trigger for categories updated_at
CREATE TRIGGER update_categories_updated_at
    BEFORE UPDATE ON public.categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- SAMPLE CATEGORIES DATA
-- =====================================================

-- Insert some default categories
INSERT INTO public.categories (name, description, color) VALUES
('Action', 'High-energy movies with intense sequences', '#EF4444'),
('Comedy', 'Movies designed to make you laugh', '#F59E0B'),
('Drama', 'Character-driven stories with emotional depth', '#8B5CF6'),
('Horror', 'Movies designed to frighten and create suspense', '#1F2937'),
('Sci-Fi', 'Science fiction and futuristic themes', '#06B6D4'),
('Thriller', 'Suspenseful movies that keep you on edge', '#DC2626'),
('Romance', 'Love stories and romantic relationships', '#EC4899'),
('Fantasy', 'Magical and supernatural elements', '#10B981'),
('Documentary', 'Non-fiction films about real subjects', '#6B7280'),
('Animation', 'Animated movies for all ages', '#F97316')
ON CONFLICT (name) DO NOTHING;

-- =====================================================
-- VERIFICATION QUERY
-- =====================================================

-- Run this to verify the setup worked
SELECT 
  'Categories table' as table_name,
  COUNT(*) as row_count
FROM public.categories
UNION ALL
SELECT 
  'User movie categories table' as table_name,
  COUNT(*) as row_count  
FROM public.user_movie_categories;

-- Check RLS policies
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE tablename IN ('categories', 'user_movie_categories')
ORDER BY tablename, policyname;
